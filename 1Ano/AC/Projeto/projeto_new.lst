P16 assembler v1.5 (Feb  9 2024)	c:\Users\paulo\Desktop\AC\Projeto\projeto_new.lst	Tue Jun 25 12:27:05 2024

Sections
Index   Name            Address   Size
0       startup         0000      0014 20
1       .text           0014      0246 582
2       .data           025A      0016 22
3       .stack          0270      0040 64

Symbols
Name                    Type      Value       Section
_start                  LABEL     0004 4      startup
BLINK_TIME              ABSOLUTE  0005 5      startup
CONFIG_LED_OFF          ABSOLUTE  0003 3      startup
config_led_off          LABEL     00EE 238    .text
config_led_off_entry    LABEL     00DC 220    .text
CONFIG_LED_ON           ABSOLUTE  0002 2      startup
config_led_on           LABEL     00D4 212    .text
config_led_on_entry     LABEL     00C2 194    .text
CONFIG_MASK             ABSOLUTE  0010 16     startup
config_mode             LABEL     00F8 248    .text
config_mode_entry       LABEL     00BC 188    .text
config_mode_exit        LABEL     0112 274    .text
CPSR_BIT_I              ABSOLUTE  0010 16     startup
crossing_time_get       LABEL     0166 358    .text
crossing_time_init      LABEL     015C 348    .text
CROSSING_TIME_INIT_VAL  ABSOLUTE  0000 0      startup
crossing_time_set       LABEL     0178 376    .text
crossing_times          LABEL     0266 614    .data
crossing_times_addr     LABEL     018A 394    .text
cur_crossing_time       LABEL     0264 612    .data
cur_crossing_time_addr  LABEL     0188 392    .text
cur_delay               LABEL     0260 608    .data
cur_delay_addr          LABEL     01C6 454    .text
current_state           LABEL     025C 604    .data
current_state_addr      LABEL     012A 298    .text
delay_check             LABEL     01B6 438    .text
delay_start             LABEL     01AC 428    .text
end_led_control         LABEL     0152 338    .text
get_current_state       LABEL     011E 286    .text
inport_addr             LABEL     01E2 482    .text
INPORT_ADDRESS          ABSOLUTE  FF80 65408  startup
inport_read             LABEL     01DC 476    .text
isr                     LABEL     018C 396    .text
isr_addr                LABEL     0012 18     startup
led_control             LABEL     012C 300    .text
led_control_l2          LABEL     0148 328    .text
led_control_l3          LABEL     014E 334    .text
LED_MASK                ABSOLUTE  0003 3      startup
line#68                 LABEL     000C 12     startup
main                    LABEL     0014 20     .text
main_addr               LABEL     0010 16     startup
MAX_CROSSING_TIME_NUM   ABSOLUTE  0004 4      startup
operation_led_off       LABEL     0058 88     .text
OPERATION_LED_OFF       ABSOLUTE  0001 1      startup
operation_led_off_entry LABEL     004C 76     .text
operation_led_on        LABEL     0044 68     .text
OPERATION_LED_ON        ABSOLUTE  0000 0      startup
operation_led_on_entry  LABEL     0038 56     .text
operation_mode          LABEL     0062 98     .text
operation_mode_entry    LABEL     0026 38     .text
outport_addr            LABEL     0228 552    .text
OUTPORT_ADDRESS         ABSOLUTE  FFC0 65472  startup
outport_clear_bits      LABEL     01F2 498    .text
outport_img             LABEL     025A 602    .data
outport_img_addr        LABEL     0220 544    .text
outport_init            LABEL     0202 514    .text
OUTPORT_INIT_VAL        ABSOLUTE  0000 0      startup
outport_set_bits        LABEL     01E4 484    .text
outport_write           LABEL     0222 546    .text
outport_write_bits      LABEL     020C 524    .text
pedestrian_button_clicks LABEL     00AE 174    .text
pedestrian_button_clicks_entry LABEL     0096 150    .text
pedestrian_button_clicks_loop LABEL     00B0 176    .text
PEDESTRIAN_BUTTON_MASK  ABSOLUTE  0001 1      startup
PEDESTRIAN_MODE         ABSOLUTE  0004 4      startup
prev_button_state       LABEL     025E 606    .data
prev_button_state_addr  LABEL     0094 148    .text
PTC_ADDR                LABEL     0258 600    .text
PTC_ADDRESS             ABSOLUTE  FF40 65344  startup
ptc_clr_irq             LABEL     0252 594    .text
PTC_CMD_START           ABSOLUTE  0000 0      startup
PTC_CMD_STOP            ABSOLUTE  0001 1      startup
ptc_get_value           LABEL     024C 588    .text
ptc_init                LABEL     022A 554    .text
ptc_start               LABEL     023C 572    .text
ptc_stop                LABEL     0244 580    .text
PTC_TC                  ABSOLUTE  0004 4      startup
PTC_TCR                 ABSOLUTE  0000 0      startup
PTC_TIR                 ABSOLUTE  0006 6      startup
PTC_TMR                 ABSOLUTE  0002 2      startup
set_crossing_time       LABEL     0184 388    .text
set_current_state       LABEL     0124 292    .text
STACK_SIZE              ABSOLUTE  0040 64     startup
stack_top               LABEL     02B0 688    .stack
stack_top_addr          LABEL     000E 14     startup
sysclk                  LABEL     0262 610    .data
sysclk_addr             LABEL     01DA 474    .text
SYSCLK_FREQ             ABSOLUTE  0009 9      startup
sysclk_get_ticks        LABEL     01D4 468    .text
sysclk_init             LABEL     01C8 456    .text
SYSCLK_INIT_VAL         ABSOLUTE  0000 0      startup
TIME_MASK               ABSOLUTE  00E0 224    startup

Code listing
   1           	; Ficheiro:  projeto.S
   2           	; Descricao: Programa para realizacao do projeto de
   3           	;            Arquitetura de Computadores.
   4           	; Autores:   Daniel Santos e Paulo Magalhaes  
   5           	; Data:      05-06-2024
   6           	
   7           	; Definicao dos valores dos simbolos utilizados no programa
   8           	;
   9          		.equ	CPSR_BIT_I, 0b010000          ; Mascara para o bit I do registo CPSR
  10           	
  11          		.equ	STACK_SIZE, 64                ; Dimensao do stack - 64 B
  12           	
  13           	    ; Definicoes do porto de entrada
  14          		.equ	INPORT_ADDRESS, 0xFF80        ; Endereco do porto de entrada
  15           	
  16           		; Definicoes do porto de saida
  17          		.equ	OUTPORT_ADDRESS, 0xFFC0       ; Endereco do porto de saida
  18           	
  19          		.equ	OUTPORT_INIT_VAL, 0           ; Valor inicial do porto de saida
  20           	
  21           		; Definicoes do circuito pTC
  22          		.equ	PTC_ADDRESS,  0xFF40          ; Endereco do circuito pTC
  23           	
  24          		.equ	PTC_TCR, 0                    ; Deslocamento do registo TCR do pTC
  25          		.equ	PTC_TMR, 2                    ; Deslocamento do registo TMR do pTC
  26          		.equ	PTC_TC,  4                    ; Deslocamento do registo TC do pTC
  27          		.equ	PTC_TIR, 6                    ; Deslocamento do registo TIR do pTC
  28           	
  29          		.equ	PTC_CMD_START, 0              ; Comando para iniciar a contagem no pTC
  30          		.equ	PTC_CMD_STOP, 1               ; Comando para parar a contagem no pTC
  31           	
  32           	    ; Outras definicoes
  33          	    .equ    PEDESTRIAN_BUTTON_MASK, 0x01    ; Mascara para o bit 0
  34          	    .equ    CONFIG_MASK, 0x10               ; Mascara para o bit 4
  35          	    .equ    TIME_MASK, (0x07 << 5)          ; Mascara para os bits 7, 6 e 5
  36           	
  37          	    .equ    LED_MASK, 0x03                   ; Mascara para os bits 0 e 1
  38           	
  39          	    .equ    SYSCLK_INIT_VAL, 0             ; Valor inicial do sistema de contagem
  40          	    .equ    SYSCLK_FREQ, 0x09              ; Intervalo de contagem do circuito pTC
  41           	                                            ; que suporta a implementação do sysclk
  42           	                                            ; 0x09 -> 100Hz , 0x63 -> 1000Hz
  43           	
  44          		.equ	BLINK_TIME, 5
  45          		.equ    CROSSING_TIME_INIT_VAL, 0       ; Tempo de travessia predefinido
  46          	    .equ    MAX_CROSSING_TIME_NUM, 5 - 1       ; Numero maximo de tempos de travessia
  47           	
  48           		; Estados do sistema
  49          		.equ	OPERATION_LED_ON, 0
  50          		.equ	OPERATION_LED_OFF, 1
  51           	
  52          		.equ 	CONFIG_LED_ON, 2
  53          		.equ 	CONFIG_LED_OFF, 3
  54           	
  55          		.equ	PEDESTRIAN_MODE, 4
  56           	
  57           	; Seccao:    startup
  58           	; Descricao: Guarda o código de arranque do sistema
  59           	;
  60           		.section startup
  61 0000 01 58		b	_start
  62 0002 7F 0C		ldr	pc, isr_addr
  63           	_start:
  64 0004 4D 0C		ldr	sp, stack_top_addr
  65 0006 80 B7	    mov r0, pc
  66 0008 0E A2	    add lr, r0, #4
  67 000A 2F 0C		ldr	pc, main_addr
  68 000C FF 5B	    b   .
  69           	
  70           	stack_top_addr:
  71 000E B0 02		.word	stack_top
  72           	main_addr:
  73 0010 14 00		.word	main
  74           	isr_addr:
  75 0012 8C 01		.word	isr
  76           	
  77           	; Seccao:    text
  78           	; Descricao: Guarda o código do programa
  79           	;
  80           		.text
  81           	
  82           	; Rotina:    main
  83           	; Descricao: Rotina principal do programa
  84           	main:
  85 0014 00 60	    mov	r0, #OUTPORT_INIT_VAL
  86 0016 F5 5C	    bl	outport_init
  87           	
  88 0018 90 60	    mov	r0, #SYSCLK_FREQ
  89 001A D6 5C		bl	sysclk_init
  90           	
  91 001C 9F 5C		bl crossing_time_init
  92           	
  93 001E 60 B0	    mrs	r0, cpsr
  94 0020 01 61	    mov	r1, #CPSR_BIT_I
  95 0022 80 C8	    orr	r0, r0, r1
  96 0024 40 B0	    msr	cpsr, r0
  97           	operation_mode_entry:
  98 0026 61 0F		ldr r1, prev_button_state_addr
  99 0028 10 60		mov r0, #1
 100 002A 10 28		strb r0, [r1]
 101           	
 102           		; Ligar o LED L3 com luz verde
 103 002C 20 60		mov	r0, #2
 104 002E 21 60		mov	r1, #2
 105 0030 7D 5C		bl	led_control
 106           	
 107           		; Ligar o LED L2 com luz vermelha
 108 0032 10 60		mov	r0, #1
 109 0034 11 60		mov	r1, #1
 110 0036 7A 5C		bl	led_control
 111           	operation_led_on_entry:
 112           		; Ligar o LED L1 com luz amarela
 113 0038 00 60		mov	r0, #0
 114 003A 31 60		mov	r1, #3
 115 003C 77 5C		bl	led_control
 116           	
 117 003E 00 60		mov r0, #OPERATION_LED_ON
 118 0040 71 5C		bl set_current_state
 119           	
 120 0042 B4 5C		bl delay_start
 121           	operation_led_on:
 122 0044 B8 5C		bl delay_check
 123 0046 51 60		mov r1, #BLINK_TIME
 124 0048 80 B8		cmp r0, r1
 125 004A 0B 4C		blo operation_mode
 126           	operation_led_off_entry:
 127           		; Desligar o LED L1
 128 004C 00 60		mov	r0, #0
 129 004E 01 60		mov	r1, #0
 130 0050 6D 5C		bl	led_control
 131           	
 132 0052 10 60		mov r0, #OPERATION_LED_OFF
 133 0054 67 5C		bl set_current_state
 134           	
 135 0056 AA 5C		bl delay_start
 136           	operation_led_off:
 137 0058 AE 5C		bl delay_check
 138 005A 51 60		mov r1, #BLINK_TIME
 139 005C 80 B8		cmp r0, r1
 140 005E 01 4C		blo operation_mode
 141           	
 142 0060 EB 5B		b operation_led_on_entry
 143           	operation_mode:
 144           		; Saltar para a config
 145 0062 BC 5C		bl inport_read
 146 0064 01 61	    mov r1, #CONFIG_MASK
 147 0066 80 C0	    and r0, r0, r1
 148 0068 80 B8	    cmp r0, r1
 149 006A 28 40	    beq config_mode_entry
 150           	
 151           		; Click no botão
 152 006C B7 5C		bl inport_read
 153 006E 11 60		mov r1, #PEDESTRIAN_BUTTON_MASK
 154 0070 80 C0		and r0, r0, r1
 155           		
 156 0072 01 0D		ldr r1, prev_button_state_addr
 157 0074 12 08		ldrb r2, [r1]
 158 0076 10 28		strb r0, [r1]
 159           		
 160 0078 20 B8		cmp r2, r0
 161 007A 0D 4C		blo pedestrian_button_clicks_entry
 162           	
 163 007C 50 5C		bl get_current_state
 164 007E 41 60		mov r1, #PEDESTRIAN_MODE
 165 0080 80 B8		cmp r0, r1
 166 0082 16 40		beq pedestrian_button_clicks_loop
 167           		;
 168           	
 169 0084 4C 5C		bl get_current_state
 170           	
 171 0086 01 60		mov r1, #OPERATION_LED_ON
 172 0088 80 B8		cmp r0, r1
 173 008A DC 43		beq operation_led_on
 174           	
 175 008C 11 60		mov r1, #OPERATION_LED_OFF
 176 008E 80 B8		cmp r0, r1
 177 0090 E3 43		beq operation_led_off
 178           	
 179 0092 C9 5B		b operation_mode_entry
 180           	
 181           	prev_button_state_addr:
 182 0094 5E 02		.word prev_button_state
 183           	
 184           	pedestrian_button_clicks_entry:
 185 0096 43 5C		bl get_current_state
 186 0098 41 60		mov r1, #PEDESTRIAN_MODE
 187 009A 80 B8		cmp r0, r1
 188 009C 08 40		beq pedestrian_button_clicks
 189           	
 190           		; Ligar o LED L1 com luz vermelha
 191 009E 00 60		mov	r0, #0
 192 00A0 11 60		mov	r1, #1
 193 00A2 44 5C		bl	led_control
 194           	
 195           		; Ligar o LED L2 com luz verde
 196 00A4 10 60		mov	r0, #1
 197 00A6 21 60		mov	r1, #2
 198 00A8 41 5C		bl	led_control
 199           	
 200 00AA 40 60		mov r0, #PEDESTRIAN_MODE
 201 00AC 3B 5C		bl set_current_state
 202           	pedestrian_button_clicks:
 203 00AE 7E 5C		bl delay_start
 204           	pedestrian_button_clicks_loop:
 205 00B0 82 5C		bl delay_check
 206 00B2 01 B0		mov r1, r0
 207 00B4 58 5C		bl crossing_time_get
 208 00B6 10 B8		cmp r1, r0
 209 00B8 B6 4B		bhs operation_mode_entry
 210           	
 211 00BA D3 5B		b operation_mode
 212           	
 213           	; Configuração
 214           	
 215           	config_mode_entry:
 216           		; Ligar o LED L3 com luz amarela
 217 00BC 20 60		mov	r0, #2
 218 00BE 31 60		mov	r1, #3
 219 00C0 35 5C		bl	led_control
 220           	config_led_on_entry:
 221           		; Ligar o LED L1 com luz amarela
 222 00C2 00 60		mov	r0, #0
 223 00C4 31 60		mov	r1, #3
 224 00C6 32 5C		bl	led_control
 225           		
 226           		; Ligar o LED L2 com luz verde
 227 00C8 10 60		mov	r0, #1
 228 00CA 21 60		mov	r1, #2
 229 00CC 2F 5C		bl	led_control
 230           	
 231 00CE 20 60		mov r0, #CONFIG_LED_ON
 232 00D0 29 5C		bl set_current_state
 233           	
 234 00D2 6C 5C		bl delay_start
 235           	config_led_on:
 236 00D4 70 5C		bl delay_check
 237 00D6 51 60		mov r1, #BLINK_TIME
 238 00D8 80 B8		cmp r0, r1
 239 00DA 0E 4C		blo config_mode
 240           	config_led_off_entry:
 241           		; Desligar o LED L1
 242 00DC 00 60		mov	r0, #0
 243 00DE 01 60		mov	r1, #0
 244 00E0 25 5C		bl	led_control
 245           	
 246           		; Desligar o LED L2
 247 00E2 10 60		mov	r0, #1
 248 00E4 01 60		mov	r1, #0
 249 00E6 22 5C		bl	led_control
 250           	
 251 00E8 30 60		mov r0, #CONFIG_LED_OFF
 252 00EA 1C 5C		bl set_current_state
 253           	
 254 00EC 5F 5C		bl delay_start
 255           	config_led_off:
 256 00EE 63 5C		bl delay_check
 257 00F0 51 60		mov r1, #BLINK_TIME
 258 00F2 80 B8		cmp r0, r1
 259 00F4 01 4C		blo config_mode
 260           	
 261 00F6 E5 5B		b config_led_on_entry
 262           	config_mode:
 263           		; Saltar para a operação
 264 00F8 71 5C		bl inport_read
 265 00FA 01 61	    mov r1, #CONFIG_MASK
 266 00FC 80 C0	    and r0, r0, r1
 267 00FE 80 B8	    cmp r0, r1
 268 0100 08 44	    bne config_mode_exit
 269           	
 270 0102 0D 5C		bl get_current_state
 271           	
 272 0104 21 60		mov r1, #CONFIG_LED_ON
 273 0106 80 B8		cmp r0, r1
 274 0108 E5 43		beq config_led_on
 275           	
 276 010A 31 60		mov r1, #CONFIG_LED_OFF
 277 010C 80 B8		cmp r0, r1
 278 010E EF 43		beq config_led_off
 279           	
 280 0110 D5 5B		b config_mode_entry
 281           	config_mode_exit:
 282 0112 64 5C		bl inport_read
 283 0114 01 6E	    mov r1, #TIME_MASK
 284 0116 80 C0	    and r0, r0, r1
 285 0118 80 EA	    lsr r0, r0, #5
 286 011A 2E 5C	    bl crossing_time_set
 287           	
 288 011C 84 5B		b operation_mode_entry
 289           	
 290           	; Gestor do estado atual
 291           	;
 292           	
 293           	; Rotina:    get_current_state
 294           	; Descricao: Devolve o valor corrente do estado do sistema
 295           	; Entradas:  -
 296           	; Saidas:    R0 - Valor corrente do estado do sistema
 297           	; Efeitos:   -
 298           	get_current_state:
 299 011E 51 0C		ldr r1, current_state_addr
 300 0120 10 08		ldrb r0, [r1]
 301 0122 0F B7		mov pc, lr
 302           	
 303           	; Rotina:    set_current_state
 304           	; Descricao: Atribui o valor recebido em R0 ao estado do sistema
 305           	; Entradas:  R0 - Novo valor do estado do sistema
 306           	; Saidas:    -
 307           	; Efeitos:   -
 308           	set_current_state:
 309 0124 21 0C		ldr r1, current_state_addr
 310 0126 10 28		strb r0, [r1]
 311 0128 0F B7		mov pc, lr
 312           	
 313           	current_state_addr:
 314 012A 5C 02		.word current_state
 315           	
 316           	; Rotina:   led_control
 317           	; Descricao: Controla o LED especificado com base no valor fornecido
 318           	; Entradas:  r0 - Número do LED a controlar entre 0 e 2
 319           	;            r1 - Modo (0, 1, 2, 3) 0 - Desligar LEDs; 1 - Ligar LED vermelho; 2 - Ligar LED verde; 3 - Ligar ambos os LEDs
 320           	; Saidas:    -
 321           	; Efeitos:   Controla o LED especificado
 322           	led_control:
 323 012C 0E 24	    push lr
 324 012E 04 24	    push r4 ; mask
 325 0130 05 24	    push r5 ; temp
 326           	
 327 0132 34 60	    mov r4, #LED_MASK
 328           	
 329 0134 05 60	    mov r5, #0
 330 0136 80 BA	    cmp r0, r5
 331 0138 0C 40	    beq end_led_control
 332           	
 333 013A 15 60	    mov r5, #1
 334 013C 80 BA	    cmp r0, r5
 335 013E 04 40	    beq led_control_l2
 336           	
 337 0140 25 60	    mov r5, #2
 338 0142 80 BA	    cmp r0, r5
 339 0144 04 40	    beq led_control_l3
 340           	
 341 0146 05 58	    b end_led_control
 342           	led_control_l2:
 343 0148 44 E1	    lsl r4, r4, #2
 344 014A 11 E1	    lsl r1, r1, #2
 345           	    
 346 014C 02 58	    b end_led_control
 347           	led_control_l3:
 348 014E 44 E2	    lsl r4, r4, #4
 349 0150 11 E2	    lsl r1, r1, #4
 350           	end_led_control:
 351 0152 00 B2	    mov r0, r4
 352 0154 5B 5C	    bl outport_write_bits
 353           	
 354 0156 05 04	    pop r5
 355 0158 04 04	    pop r4
 356 015A 0F 04	    pop pc
 357           	
 358           	; Rotina:    crossing_time_init
 359           	; Descricao: Inicializa o tempo de travessia
 360           	; Entradas:  -
 361           	; Saidas:    -
 362           	; Efeitos:   -
 363           	crossing_time_init:
 364 015C 0E 24	    push lr
 365           	
 366 015E 41 0D	    ldr r1, cur_crossing_time_addr
 367 0160 00 60	    mov r0, #CROSSING_TIME_INIT_VAL
 368 0162 10 20	    str r0, [r1, #0]
 369           	
 370 0164 0F 04	    pop pc
 371           	
 372           	; Rotina:    crossing_time_get
 373           	; Descricao: Devolve o tempo de travessia
 374           	; Entradas:  -
 375           	; Saidas:    r0 - Tempo de travessia
 376           	; Efeitos:   -
 377           	crossing_time_get:
 378 0166 0E 24	    push lr
 379 0168 04 24		push r4
 380           	
 381 016A E4 0C	    ldr r4, cur_crossing_time_addr
 382 016C 40 00	    ldr r0, [r4, #0]
 383 016E 80 E0		lsl r0, r0, #1
 384           	
 385 0170 C4 0C		ldr r4, crossing_times_addr
 386 0172 40 10		ldr r0, [r4, r0]
 387           	
 388 0174 04 04		pop r4
 389 0176 0F 04	    pop pc
 390           	
 391           	; Rotina:    crossing_time_set
 392           	; Descricao: Define o tempo de travessia e caso o tempo seja maior que o tempo máximo, o tempo é definido para o tempo máximo
 393           	; Entradas:  r0 - Tempo de travessia
 394           	; Saidas:    -
 395           	; Efeitos:   -
 396           	crossing_time_set:
 397 0178 0E 24	    push lr
 398           	
 399 017A 61 0C	    ldr r1, cur_crossing_time_addr
 400 017C 42 60	    mov r2, #MAX_CROSSING_TIME_NUM
 401 017E 00 B9	    cmp r0, r2
 402 0180 01 4C	    blo set_crossing_time
 403           	
 404 0182 00 B1	    mov r0, r2
 405           	set_crossing_time:
 406 0184 10 20	    str r0, [r1, #0]
 407           	
 408 0186 0F 04	    pop pc
 409           	
 410           	cur_crossing_time_addr:
 411 0188 64 02		.word cur_crossing_time
 412           	
 413           	crossing_times_addr:
 414 018A 66 02	    .word crossing_times
 415           	
 416           	; Rotina:    isr
 417           	; Descricao: Incrementa o valor da variável global sysclk.
 418           	; Entradas:  -
 419           	; Saidas:    -
 420           	; Efeitos:   Incrementa o valor da variável global sysclk
 421           	isr: 
 422 018C 0E 24		push lr
 423 018E 00 24		push r0
 424 0190 01 24		push r1
 425 0192 02 24		push r2
 426 0194 03 24		push r3
 427           	
 428 0196 11 0E		ldr r1, sysclk_addr
 429 0198 10 00		ldr r0, [r1]
 430           		
 431 019A 80 A0		add r0, r0, #1
 432 019C 10 20		str r0, [r1]
 433           	
 434 019E 59 5C		bl ptc_clr_irq
 435           	
 436 01A0 03 04		pop r3
 437 01A2 02 04		pop r2
 438 01A4 01 04		pop r1
 439 01A6 00 04		pop r0
 440 01A8 0E 04		pop lr
 441 01AA 20 B0	    movs pc, lr
 442           	
 443           	
 444           	; Rotina:    delay_start
 445           	; Descricao: Inicia um atraso.
 446           	;            Interface exemplo: void delay_start(  );
 447           	; Entradas:  -
 448           	; Saidas:    -
 449           	; Efeitos:   -
 450           	delay_start:
 451 01AC 0E 24	    push	lr
 452           	    
 453 01AE 12 5C	    bl sysclk_get_ticks
 454 01B0 A1 0C	    ldr		r1, cur_delay_addr
 455 01B2 10 20	    str r0, [r1, #0]
 456           	
 457 01B4 0F 04	    pop		pc
 458           	
 459           	; Rotina:    delay_check
 460           	; Descricao: Rotina não bloqueante que verifica o tempo que passou usando o valor do cur_sysclk.
 461           	;            Interface exemplo: void delay_check();
 462           	; Entradas:  R0 - Tempo a esperar, em centenas de milissegundos.
 463           	; Saidas:    -
 464           	; Efeitos:   -
 465           	delay_check:
 466 01B6 0E 24		push	lr
 467 01B8 04 24	    push	r4		; time_start
 468           	
 469 01BA 0C 5C		bl		sysclk_get_ticks
 470           	
 471 01BC 44 0C	    ldr		r4, cur_delay_addr
 472 01BE 44 00	    ldr     r4, [r4, #0]
 473 01C0 00 8A		sub 	r0, r0, r4
 474           	
 475 01C2 04 04		pop		r4
 476 01C4 0F 04		pop		pc
 477           	
 478           	cur_delay_addr:
 479 01C6 60 02	    .word	cur_delay
 480           	
 481           	; Rotina:    sysclk_init
 482           	; Descricao: Inicia uma nova contagem no periferico pTC com o intervalo de
 483           	;            contagem recebido em R0, em ticks, limpando eventuais pedidos de
 484           	;            interrupcao pendentes e iniciando com o valor zero a variavel
 485           	;            global sysclk.
 486           	;            Interface exemplo: void sysclk_init( uint8_t interval );
 487           	; Entradas:  R0 - Valor do novo intervalo de contagem, em ticks.
 488           	; Saidas:    -
 489           	; Efeitos:   Inicia a contagem no periferico a partir do valor zero, limpando
 490           	;            eventuais pedidos de interrupcao pendentes e iniciando com o
 491           	;            valor zero a variavel global sysclk
 492           	sysclk_init:
 493 01C8 0E 24		push lr
 494           	
 495 01CA 2F 5C		bl ptc_init
 496           	
 497 01CC 61 0C		ldr	r1, sysclk_addr
 498 01CE 00 60		mov	r0, #SYSCLK_INIT_VAL
 499 01D0 10 20		str r0, [r1]
 500           	
 501 01D2 0F 04		pop pc
 502           	
 503           	; Rotina:    sysclk_get_ticks
 504           	; Descricao: Devolve o valor corrente da variável global sysclk.
 505           	;            Interface exemplo: uint16_t sysclk_get_ticks ( );
 506           	; Entradas:  -
 507           	; Saidas:    R0 - Valor corrente da variável global sysclk
 508           	; Efeitos:   Devolve o valor atual da variável global sysclk
 509           	sysclk_get_ticks:
 510 01D4 21 0C		ldr r1, sysclk_addr
 511 01D6 10 00		ldr r0, [r1]
 512           	
 513 01D8 0F B7		mov pc, lr
 514           	
 515           	sysclk_addr:
 516 01DA 62 02		.word	sysclk
 517           	
 518           	; Gestor de periférico para o porto de entrada
 519           	;
 520           	
 521           	; Rotina:    inport_read
 522           	; Descricao: Adquire e devolve o valor corrente do porto de entrada.
 523           	;            Interface exemplo: uint8_t inport_read( );
 524           	; Entradas:  -
 525           	; Saidas:    R0 - valor adquirido do porto de entrada
 526           	; Efeitos:   -
 527           	inport_read:
 528 01DC 21 0C		ldr	r1, inport_addr
 529 01DE 10 08		ldrb	r0, [r1, #0]
 530 01E0 0F B7		mov	pc, lr
 531           	
 532           	inport_addr:
 533 01E2 80 FF		.word	INPORT_ADDRESS
 534           	
 535           	; Gestor de periférico para o porto de saída
 536           	;
 537           	
 538           	; Rotina:    outport_set_bits
 539           	; Descricao: Atribui o valor logico 1 aos bits do porto de saida identificados
 540           	;            com o valor 1 em R0. O valor dos outros bits nao e alterado.
 541           	;            Interface exemplo: void outport_set_bits( uint8_t pins_mask );
 542           	; Entradas:  R0 - Mascara com a especificacao do indice dos bits a alterar.
 543           	; Saidas:    -
 544           	; Efeitos:   Altera o valor da variavel global outport_img.
 545           	outport_set_bits:
 546 01E4 0E 24		push	lr
 547 01E6 C1 0D		ldr	r1, outport_img_addr
 548 01E8 12 08		ldrb	r2, [r1, #0]
 549 01EA 20 C8		orr	r0, r2, r0
 550 01EC 10 28		strb	r0, [r1, #0]
 551 01EE 19 5C		bl	outport_write
 552 01F0 0F 04		pop	pc
 553           	
 554           	; Rotina:    outport_clear_bits
 555           	; Descricao: Atribui o valor logico 0 aos bits do porto de saida identificados
 556           	;            com o valor 1 em R0. O valor dos outros bits nao e alterado.
 557           	;            Interface exemplo: void outport_clear_bits( uint8_t pins_mask );
 558           	; Entradas:  R0 - Mascara com a especificacao do indice dos bits a alterar.
 559           	; Saidas:    -
 560           	; Efeitos:   Altera o valor da variavel global outport_img.
 561           	outport_clear_bits:
 562 01F2 0E 24		push	lr
 563 01F4 51 0D		ldr	r1, outport_img_addr
 564 01F6 12 08		ldrb	r2, [r1, #0]
 565 01F8 10 B0		mvn	r0, r0
 566 01FA 20 C0		and	r0, r2, r0
 567 01FC 10 28		strb	r0, [r1]
 568 01FE 11 5C		bl	outport_write
 569 0200 0F 04		pop	pc
 570           	
 571           	; Rotina:    outport_init
 572           	; Descricao: Faz a iniciacao do porto de saida, nele estabelecendo o valor
 573           	;            recebido em R0.
 574           	;            Interface exemplo: void outport_init( uint8_t value );
 575           	; Entradas:  R0 - Valor a atribuir ao porto de saida.
 576           	; Saidas:    -
 577           	; Efeitos:   Altera o valor da variavel global outport_img.
 578           	outport_init:
 579 0202 0E 24		push	lr
 580 0204 D1 0C		ldr	r1, outport_img_addr
 581 0206 10 28		strb	r0, [r1]
 582 0208 0C 5C		bl	outport_write
 583 020A 0F 04		pop	pc
 584           	
 585           	; Rotina:    outport_write_bits
 586           	; Descricao: Atribui aos bits do porto de saída o valor dos bits
 587           	;            correspondentes do argumento do segundo parametro, no caso dos
 588           	;            bits correspondentes do argumento do primeiro parametro
 589           	;            apresentarem o valor um. O valor dos restantes bits do porto de
 590           	;            saida mantem-se inalterado.
 591           	;            Interface exemplo:
 592           	;                void outport_write_bits( uint8_t pins_mask, uint8_t value );
 593           	; Entradas:  R0 - Mascara com a especificacao do indice dos bits a alterar.
 594           	;            R1 - Valor a atribuir aos bits do porto de saida.
 595           	; Saidas:    -
 596           	; Efeitos:   Atualiza o valor da variavel global outport_img
 597           	outport_write_bits: 
 598 020C 0E 24		push	lr
 599 020E 82 0C		ldr	r2, outport_img_addr
 600 0210 23 00		ldr	r3, [r2, #0] 
 601 0212 81 C0		and	r1, r0, r1 
 602 0214 10 B0		mvn	r0, r0
 603 0216 30 C0		and	r0, r3, r0 
 604 0218 80 C8		orr	r0, r0, r1 
 605 021A 20 28		strb	r0, [r2, #0]
 606 021C 02 5C		bl	outport_write
 607 021E 0F 04		pop	pc
 608           	
 609           	outport_img_addr:
 610 0220 5A 02		.word	outport_img
 611           	
 612           	; Rotina:    outport_write
 613           	; Descricao: Escreve no porto de saida o valor recebido em R0.
 614           	;            Interface exemplo: void outport_write( uint8_t value );
 615           	; Entradas:  R0 - valor a atribuir ao porto de saida.
 616           	; Saidas:    -
 617           	; Efeitos:   -
 618           	outport_write:
 619 0222 21 0C		ldr	r1, outport_addr
 620 0224 10 28		strb	r0, [r1, #0]
 621 0226 0F B7		mov	pc, lr
 622           	
 623           	outport_addr:
 624 0228 C0 FF		.word	OUTPORT_ADDRESS
 625           	
 626           	; Gestor de periférico para o Pico Timer/Counter (pTC)
 627           	;
 628           	
 629           	; Rotina:    ptc_init
 630           	; Descricao: Faz a iniciacao do periférico pTC, habilitando o seu funcionamento
 631           	;            em modo continuo e com o intervalo de contagem recebido em R0, em
 632           	;            ticks.
 633           	;            Interface exemplo: void ptc_init( uint8_t interval );
 634           	; Entradas:  R0 - Valor do novo intervalo de contagem, em ticks.
 635           	; Saidas:    -
 636           	; Efeitos:   Inicia a contagem no periferico a partir do valor zero, limpando
 637           	;            o pedido de interrupcao eventualmente pendente.
 638           	ptc_init:
 639 022A 0E 24	    push    lr
 640 022C 51 0D		ldr	r1, PTC_ADDR
 641 022E 12 60		mov	r2, #PTC_CMD_STOP
 642 0230 12 28		strb	r2, [r1, #PTC_TCR]
 643 0232 10 29		strb	r0, [r1, #PTC_TMR]
 644 0234 0E 5C	    bl  ptc_clr_irq
 645 0236 02 60		mov	r2, #PTC_CMD_START
 646 0238 12 28		strb	r2, [r1, #PTC_TCR]
 647 023A 0F 04		pop pc
 648           	
 649           	; Rotina:    ptc_start
 650           	; Descricao: Habilita a contagem no periferico pTC.
 651           	;            Interface exemplo: void ptc_start( );
 652           	; Entradas:  -
 653           	; Saidas:    -
 654           	; Efeitos:   -
 655           	ptc_start:
 656 023C D0 0C		ldr	r0, PTC_ADDR
 657 023E 01 60		mov	r1, #PTC_CMD_START
 658 0240 01 28		strb	r1, [r0, #PTC_TCR]
 659 0242 0F B7		mov	pc, lr
 660           	
 661           	; Rotina:    ptc_stop
 662           	; Descricao: Para a contagem no periferico pTC.
 663           	;            Interface exemplo: void ptc_stop( );
 664           	; Entradas:  -
 665           	; Saidas:    -
 666           	; Efeitos:   O valor do registo TC do periferico e colocado a zero.
 667           	ptc_stop:
 668 0244 90 0C		ldr	r0, PTC_ADDR
 669 0246 11 60		mov	r1, #PTC_CMD_STOP
 670 0248 01 28		strb	r1, [r0, #PTC_TCR]
 671 024A 0F B7		mov	pc, lr
 672           	
 673           	; Rotina:    ptc_get_value
 674           	; Descricao: Devolve o valor corrente da contagem do periferico pTC.
 675           	;            Interface exemplo: uint8_t ptc_get_value( );
 676           	; Entradas:  -
 677           	; Saidas:    R0 - O valor corrente do registo TC do periferico.
 678           	; Efeitos:   -
 679           	ptc_get_value:
 680 024C 51 0C		ldr	r1, PTC_ADDR
 681 024E 10 0A		ldrb	r0, [r1, #PTC_TC]
 682 0250 0F B7		mov	pc, lr
 683           	
 684           	; Rotina:    ptc_clr_irq
 685           	; Descricao: Sinaliza o periferico pTC que foi atendido um pedido de
 686           	;            interrupção.
 687           	;            Interface exemplo: void ptc_clr_irq( );
 688           	; Entradas:  -
 689           	; Saidas:    -
 690           	; Efeitos:   -
 691           	ptc_clr_irq:
 692 0252 20 0C		ldr	r0, PTC_ADDR
 693 0254 01 2B		strb	r1, [r0, #PTC_TIR]
 694 0256 0F B7		mov	pc, lr
 695           	
 696           	PTC_ADDR:
 697 0258 40 FF		.word	PTC_ADDRESS
 698           	
 699           	; Seccao:    data
 700           	; Descricao: Guarda as variáveis globais
 701           	;
 702           		.data
 703           	outport_img:
 704 025A 00   		.space	1
 705           	
 706 025B 00  		.align
 707           	current_state:
 708 025C 00   		.space	1
 709           	
 710 025D 00  		.align
 711           	prev_button_state:
 712 025E 00   		.space	1
 713           	
 714 025F 00  		.align
 715           	cur_delay:
 716 0260 00   	    .space	2
 716 0261 00
 717           	sysclk:
 718 0262 00   		.space	2
 718 0263 00
 719           	cur_crossing_time:
 720 0264 00   		.space	2
 720 0265 00
 721           	crossing_times:
 722          	    .word 100, 200, 300, 400, 600
 722 0266 64 00 C8 00 2C 01 90 01 58 02
 723           	
 724           	; Seccao:    stack
 725           	; Descricao: Implementa a pilha com o tamanho definido pelo simbolo STACK_SIZE
 726           	;
 727           		.stack
 728 0270 00   		.space	STACK_SIZE
 728 .... ..
 728 02AF 00
 729           	stack_top:
 729           	
